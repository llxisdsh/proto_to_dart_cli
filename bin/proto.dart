class AutoGenerated {
  UserBase? userBase;
  User? user;
  UserSummer? userSummer;
  UserDetail? userDetail;
  Contact? contact;
  ContactSummer? contactSummer;
  GmMsg? gmMsg;
  UserNote? userNote;
  ReqHead? reqHead;
  RetHead? retHead;
  ReqLogin? reqLogin;
  RetLogin? retLogin;
  ReqGetMe? reqGetMe;
  RetGetMe? retGetMe;
  ReqSetMe? reqSetMe;
  RetSetMe? retSetMe;
  ReqNear? reqNear;
  RetNear? retNear;
  ReqDetail? reqDetail;
  RetDetail? retDetail;
  ReqContact? reqContact;
  RetContact? retContact;
  ReqOpenContact? reqOpenContact;
  RetOpenContact? retOpenContact;
  ReqCloseContact? reqCloseContact;
  RetCloseContact? retCloseContact;
  ReqContactList? reqContactList;
  RetContactList? retContactList;
  ReqBlack? reqBlack;
  RetBlack? retBlack;
  ReqBlackId? reqBlackId;
  RetBlackId? retBlackId;
  ReqBlackIdList? reqBlackIdList;
  RetBlackIdList? retBlackIdList;
  ReqLogout? reqLogout;
  RetLogout? retLogout;
  ReqReport? reqReport;
  RetReport? retReport;
  ReqSetNote? reqSetNote;
  RetSetNote? retSetNote;
  ReqGetNote? reqGetNote;
  RetGetNote? retGetNote;
  ReqGmBan? reqGmBan;
  RetGmBan? retGmBan;
  ReqGmMsg? reqGmMsg;
  RetGmMsg? retGmMsg;
  ReqGmMsgList? reqGmMsgList;
  RetGmMsgList? retGmMsgList;
  ReqOss? reqOss;
  RetOss? retOss;

  AutoGenerated(
      {this.userBase,
      this.user,
      this.userSummer,
      this.userDetail,
      this.contact,
      this.contactSummer,
      this.gmMsg,
      this.userNote,
      this.reqHead,
      this.retHead,
      this.reqLogin,
      this.retLogin,
      this.reqGetMe,
      this.retGetMe,
      this.reqSetMe,
      this.retSetMe,
      this.reqNear,
      this.retNear,
      this.reqDetail,
      this.retDetail,
      this.reqContact,
      this.retContact,
      this.reqOpenContact,
      this.retOpenContact,
      this.reqCloseContact,
      this.retCloseContact,
      this.reqContactList,
      this.retContactList,
      this.reqBlack,
      this.retBlack,
      this.reqBlackId,
      this.retBlackId,
      this.reqBlackIdList,
      this.retBlackIdList,
      this.reqLogout,
      this.retLogout,
      this.reqReport,
      this.retReport,
      this.reqSetNote,
      this.retSetNote,
      this.reqGetNote,
      this.retGetNote,
      this.reqGmBan,
      this.retGmBan,
      this.reqGmMsg,
      this.retGmMsg,
      this.reqGmMsgList,
      this.retGmMsgList,
      this.reqOss,
      this.retOss});

  AutoGenerated.fromJson(Map<String, dynamic> json) {
    userBase =
        json['UserBase'] != null ? UserBase.fromJson(json['UserBase']) : null;
    user = json['User'] != null ? User.fromJson(json['User']) : null;
    userSummer = json['UserSummer'] != null
        ? UserSummer.fromJson(json['UserSummer'])
        : null;
    userDetail = json['UserDetail'] != null
        ? UserDetail.fromJson(json['UserDetail'])
        : null;
    contact =
        json['Contact'] != null ? Contact.fromJson(json['Contact']) : null;
    contactSummer = json['ContactSummer'] != null
        ? ContactSummer.fromJson(json['ContactSummer'])
        : null;
    gmMsg = json['GmMsg'] != null ? GmMsg.fromJson(json['GmMsg']) : null;
    userNote =
        json['UserNote'] != null ? UserNote.fromJson(json['UserNote']) : null;
    reqHead =
        json['ReqHead'] != null ? ReqHead.fromJson(json['ReqHead']) : null;
    retHead =
        json['RetHead'] != null ? RetHead.fromJson(json['RetHead']) : null;
    reqLogin =
        json['ReqLogin'] != null ? ReqLogin.fromJson(json['ReqLogin']) : null;
    retLogin =
        json['RetLogin'] != null ? RetLogin.fromJson(json['RetLogin']) : null;
    reqGetMe =
        json['ReqGetMe'] != null ? ReqGetMe.fromJson(json['ReqGetMe']) : null;
    retGetMe =
        json['RetGetMe'] != null ? RetGetMe.fromJson(json['RetGetMe']) : null;
    reqSetMe =
        json['ReqSetMe'] != null ? ReqSetMe.fromJson(json['ReqSetMe']) : null;
    retSetMe =
        json['RetSetMe'] != null ? RetSetMe.fromJson(json['RetSetMe']) : null;
    reqNear =
        json['ReqNear'] != null ? ReqNear.fromJson(json['ReqNear']) : null;
    retNear =
        json['RetNear'] != null ? RetNear.fromJson(json['RetNear']) : null;
    reqDetail = json['ReqDetail'] != null
        ? ReqDetail.fromJson(json['ReqDetail'])
        : null;
    retDetail = json['RetDetail'] != null
        ? RetDetail.fromJson(json['RetDetail'])
        : null;
    reqContact = json['ReqContact'] != null
        ? ReqContact.fromJson(json['ReqContact'])
        : null;
    retContact = json['RetContact'] != null
        ? RetContact.fromJson(json['RetContact'])
        : null;
    reqOpenContact = json['ReqOpenContact'] != null
        ? ReqOpenContact.fromJson(json['ReqOpenContact'])
        : null;
    retOpenContact = json['RetOpenContact'] != null
        ? RetOpenContact.fromJson(json['RetOpenContact'])
        : null;
    reqCloseContact = json['ReqCloseContact'] != null
        ? ReqCloseContact.fromJson(json['ReqCloseContact'])
        : null;
    retCloseContact = json['RetCloseContact'] != null
        ? RetCloseContact.fromJson(json['RetCloseContact'])
        : null;
    reqContactList = json['ReqContactList'] != null
        ? ReqContactList.fromJson(json['ReqContactList'])
        : null;
    retContactList = json['RetContactList'] != null
        ? RetContactList.fromJson(json['RetContactList'])
        : null;
    reqBlack =
        json['ReqBlack'] != null ? ReqBlack.fromJson(json['ReqBlack']) : null;
    retBlack =
        json['RetBlack'] != null ? RetBlack.fromJson(json['RetBlack']) : null;
    reqBlackId = json['ReqBlackId'] != null
        ? ReqBlackId.fromJson(json['ReqBlackId'])
        : null;
    retBlackId = json['RetBlackId'] != null
        ? RetBlackId.fromJson(json['RetBlackId'])
        : null;
    reqBlackIdList = json['ReqBlackIdList'] != null
        ? ReqBlackIdList.fromJson(json['ReqBlackIdList'])
        : null;
    retBlackIdList = json['RetBlackIdList'] != null
        ? RetBlackIdList.fromJson(json['RetBlackIdList'])
        : null;
    reqLogout = json['ReqLogout'] != null
        ? ReqLogout.fromJson(json['ReqLogout'])
        : null;
    retLogout = json['RetLogout'] != null
        ? RetLogout.fromJson(json['RetLogout'])
        : null;
    reqReport = json['ReqReport'] != null
        ? ReqReport.fromJson(json['ReqReport'])
        : null;
    retReport = json['RetReport'] != null
        ? RetReport.fromJson(json['RetReport'])
        : null;
    reqSetNote = json['ReqSetNote'] != null
        ? ReqSetNote.fromJson(json['ReqSetNote'])
        : null;
    retSetNote = json['RetSetNote'] != null
        ? RetSetNote.fromJson(json['RetSetNote'])
        : null;
    reqGetNote = json['ReqGetNote'] != null
        ? ReqGetNote.fromJson(json['ReqGetNote'])
        : null;
    retGetNote = json['RetGetNote'] != null
        ? RetGetNote.fromJson(json['RetGetNote'])
        : null;
    reqGmBan =
        json['ReqGmBan'] != null ? ReqGmBan.fromJson(json['ReqGmBan']) : null;
    retGmBan =
        json['RetGmBan'] != null ? RetGmBan.fromJson(json['RetGmBan']) : null;
    reqGmMsg =
        json['ReqGmMsg'] != null ? ReqGmMsg.fromJson(json['ReqGmMsg']) : null;
    retGmMsg =
        json['RetGmMsg'] != null ? RetGmMsg.fromJson(json['RetGmMsg']) : null;
    reqGmMsgList = json['ReqGmMsgList'] != null
        ? ReqGmMsgList.fromJson(json['ReqGmMsgList'])
        : null;
    retGmMsgList = json['RetGmMsgList'] != null
        ? RetGmMsgList.fromJson(json['RetGmMsgList'])
        : null;
    reqOss = json['ReqOss'] != null ? ReqOss.fromJson(json['ReqOss']) : null;
    retOss = json['RetOss'] != null ? RetOss.fromJson(json['RetOss']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    if (userBase != null) {
      data['UserBase'] = userBase!.toJson();
    }
    if (user != null) {
      data['User'] = user!.toJson();
    }
    if (userSummer != null) {
      data['UserSummer'] = userSummer!.toJson();
    }
    if (userDetail != null) {
      data['UserDetail'] = userDetail!.toJson();
    }
    if (contact != null) {
      data['Contact'] = contact!.toJson();
    }
    if (contactSummer != null) {
      data['ContactSummer'] = contactSummer!.toJson();
    }
    if (gmMsg != null) {
      data['GmMsg'] = gmMsg!.toJson();
    }
    if (userNote != null) {
      data['UserNote'] = userNote!.toJson();
    }
    if (reqHead != null) {
      data['ReqHead'] = reqHead!.toJson();
    }
    if (retHead != null) {
      data['RetHead'] = retHead!.toJson();
    }
    if (reqLogin != null) {
      data['ReqLogin'] = reqLogin!.toJson();
    }
    if (retLogin != null) {
      data['RetLogin'] = retLogin!.toJson();
    }
    if (reqGetMe != null) {
      data['ReqGetMe'] = reqGetMe!.toJson();
    }
    if (retGetMe != null) {
      data['RetGetMe'] = retGetMe!.toJson();
    }
    if (reqSetMe != null) {
      data['ReqSetMe'] = reqSetMe!.toJson();
    }
    if (retSetMe != null) {
      data['RetSetMe'] = retSetMe!.toJson();
    }
    if (reqNear != null) {
      data['ReqNear'] = reqNear!.toJson();
    }
    if (retNear != null) {
      data['RetNear'] = retNear!.toJson();
    }
    if (reqDetail != null) {
      data['ReqDetail'] = reqDetail!.toJson();
    }
    if (retDetail != null) {
      data['RetDetail'] = retDetail!.toJson();
    }
    if (reqContact != null) {
      data['ReqContact'] = reqContact!.toJson();
    }
    if (retContact != null) {
      data['RetContact'] = retContact!.toJson();
    }
    if (reqOpenContact != null) {
      data['ReqOpenContact'] = reqOpenContact!.toJson();
    }
    if (retOpenContact != null) {
      data['RetOpenContact'] = retOpenContact!.toJson();
    }
    if (reqCloseContact != null) {
      data['ReqCloseContact'] = reqCloseContact!.toJson();
    }
    if (retCloseContact != null) {
      data['RetCloseContact'] = retCloseContact!.toJson();
    }
    if (reqContactList != null) {
      data['ReqContactList'] = reqContactList!.toJson();
    }
    if (retContactList != null) {
      data['RetContactList'] = retContactList!.toJson();
    }
    if (reqBlack != null) {
      data['ReqBlack'] = reqBlack!.toJson();
    }
    if (retBlack != null) {
      data['RetBlack'] = retBlack!.toJson();
    }
    if (reqBlackId != null) {
      data['ReqBlackId'] = reqBlackId!.toJson();
    }
    if (retBlackId != null) {
      data['RetBlackId'] = retBlackId!.toJson();
    }
    if (reqBlackIdList != null) {
      data['ReqBlackIdList'] = reqBlackIdList!.toJson();
    }
    if (retBlackIdList != null) {
      data['RetBlackIdList'] = retBlackIdList!.toJson();
    }
    if (reqLogout != null) {
      data['ReqLogout'] = reqLogout!.toJson();
    }
    if (retLogout != null) {
      data['RetLogout'] = retLogout!.toJson();
    }
    if (reqReport != null) {
      data['ReqReport'] = reqReport!.toJson();
    }
    if (retReport != null) {
      data['RetReport'] = retReport!.toJson();
    }
    if (reqSetNote != null) {
      data['ReqSetNote'] = reqSetNote!.toJson();
    }
    if (retSetNote != null) {
      data['RetSetNote'] = retSetNote!.toJson();
    }
    if (reqGetNote != null) {
      data['ReqGetNote'] = reqGetNote!.toJson();
    }
    if (retGetNote != null) {
      data['RetGetNote'] = retGetNote!.toJson();
    }
    if (reqGmBan != null) {
      data['ReqGmBan'] = reqGmBan!.toJson();
    }
    if (retGmBan != null) {
      data['RetGmBan'] = retGmBan!.toJson();
    }
    if (reqGmMsg != null) {
      data['ReqGmMsg'] = reqGmMsg!.toJson();
    }
    if (retGmMsg != null) {
      data['RetGmMsg'] = retGmMsg!.toJson();
    }
    if (reqGmMsgList != null) {
      data['ReqGmMsgList'] = reqGmMsgList!.toJson();
    }
    if (retGmMsgList != null) {
      data['RetGmMsgList'] = retGmMsgList!.toJson();
    }
    if (reqOss != null) {
      data['ReqOss'] = reqOss!.toJson();
    }
    if (retOss != null) {
      data['RetOss'] = retOss!.toJson();
    }
    return data;
  }
}

class UserBase {
  int? id;
  String? nm;
  String? logo;

  UserBase({this.id, this.nm, this.logo});

  UserBase.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    nm = json['Nm'];
    logo = json['Logo'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Nm'] = nm;
    data['Logo'] = logo;
    return data;
  }
}

class User {
  int? id;
  String? nm;
  String? logo;
  int? sex;
  int? sexMatch;
  int? sexGay;
  int? demands;
  int? height;
  int? weight;
  int? birthday;
  int? degree;
  int? career;
  int? income;
  List<String>? labels;
  String? school;
  String? company;
  String? extend;
  String? logoBig;
  List<Shot>? shot;
  DateTime? lastTime;
  Gps? gps;
  Contact? contact;
  String? hp;
  String? pwd;
  DateTime? vipTime;
  DateTime? banTime;
  NoteStat? noteStat;
  List<String>? blackHp;
  List<String>? blackWechat;
  List<int>? blackId;
  int? blackGpsRange;

  User(
      {this.id,
      this.nm,
      this.logo,
      this.sex,
      this.sexMatch,
      this.sexGay,
      this.demands,
      this.height,
      this.weight,
      this.birthday,
      this.degree,
      this.career,
      this.income,
      this.labels,
      this.school,
      this.company,
      this.extend,
      this.logoBig,
      this.shot,
      this.lastTime,
      this.gps,
      this.contact,
      this.hp,
      this.pwd,
      this.vipTime,
      this.banTime,
      this.noteStat,
      this.blackHp,
      this.blackWechat,
      this.blackId,
      this.blackGpsRange});

  User.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    nm = json['Nm'];
    logo = json['Logo'];
    sex = json['Sex'];
    sexMatch = json['SexMatch'];
    sexGay = json['SexGay'];
    demands = json['Demands'];
    height = json['Height'];
    weight = json['Weight'];
    birthday = json['Birthday'];
    degree = json['Degree'];
    career = json['Career'];
    income = json['Income'];
    labels = json['Labels']?.cast<String>();
    school = json['School'];
    company = json['Company'];
    extend = json['Extend'];
    logoBig = json['LogoBig'];
    if (json['Shot'] != null) {
      shot = <Shot>[];
      json['Shot'].forEach((v) {
        shot!.add(Shot.fromJson(v));
      });
    }
    lastTime =
        json['LastTime'] != null ? DateTime.tryParse(json['LastTime']) : null;
    gps = json['Gps'] != null ? Gps.fromJson(json['Gps']) : null;
    contact =
        json['Contact'] != null ? Contact.fromJson(json['Contact']) : null;
    hp = json['Hp'];
    pwd = json['Pwd'];
    vipTime =
        json['VipTime'] != null ? DateTime.tryParse(json['VipTime']) : null;
    banTime =
        json['BanTime'] != null ? DateTime.tryParse(json['BanTime']) : null;
    noteStat =
        json['NoteStat'] != null ? NoteStat.fromJson(json['NoteStat']) : null;
    blackHp = json['BlackHp']?.cast<String>();
    blackWechat = json['BlackWechat']?.cast<String>();
    blackId = json['BlackId']?.cast<int>();
    blackGpsRange = json['BlackGpsRange'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Nm'] = nm;
    data['Logo'] = logo;
    data['Sex'] = sex;
    data['SexMatch'] = sexMatch;
    data['SexGay'] = sexGay;
    data['Demands'] = demands;
    data['Height'] = height;
    data['Weight'] = weight;
    data['Birthday'] = birthday;
    data['Degree'] = degree;
    data['Career'] = career;
    data['Income'] = income;
    data['Labels'] = labels;
    data['School'] = school;
    data['Company'] = company;
    data['Extend'] = extend;
    data['LogoBig'] = logoBig;
    if (shot != null) {
      data['Shot'] = shot!.map((v) => v.toJson()).toList();
    }
    data['LastTime'] = lastTime;
    if (gps != null) {
      data['Gps'] = gps!.toJson();
    }
    if (contact != null) {
      data['Contact'] = contact!.toJson();
    }
    data['Hp'] = hp;
    data['Pwd'] = pwd;
    data['VipTime'] = vipTime;
    data['BanTime'] = banTime;
    if (noteStat != null) {
      data['NoteStat'] = noteStat!.toJson();
    }
    data['BlackHp'] = blackHp;
    data['BlackWechat'] = blackWechat;
    data['BlackId'] = blackId;
    data['BlackGpsRange'] = blackGpsRange;
    return data;
  }
}

class Shot {
  String? key;
  bool? ok;

  Shot({this.key, this.ok});

  Shot.fromJson(Map<String, dynamic> json) {
    key = json['Key'];
    ok = json['Ok'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Key'] = key;
    data['Ok'] = ok;
    return data;
  }
}

class Gps {
  double? lng;
  double? lat;
  String? gpsDesc;

  Gps({this.lng, this.lat, this.gpsDesc});

  Gps.fromJson(Map<String, dynamic> json) {
    lng = json['Lng'];
    lat = json['Lat'];
    gpsDesc = json['GpsDesc'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Lng'] = lng;
    data['Lat'] = lat;
    data['GpsDesc'] = gpsDesc;
    return data;
  }
}

class Contact {
  String? wechat;
  List<Shot>? shot;
  int? money;
  Gps? gps;
  String? msg;
  DateTime? startTime;
  int? hours;

  Contact(
      {this.wechat,
      this.shot,
      this.money,
      this.gps,
      this.msg,
      this.startTime,
      this.hours});

  Contact.fromJson(Map<String, dynamic> json) {
    wechat = json['Wechat'];
    if (json['Shot'] != null) {
      shot = <Shot>[];
      json['Shot'].forEach((v) {
        shot!.add(Shot.fromJson(v));
      });
    }
    money = json['Money'];
    gps = json['Gps'] != null ? Gps.fromJson(json['Gps']) : null;
    msg = json['Msg'];
    startTime =
        json['StartTime'] != null ? DateTime.tryParse(json['StartTime']) : null;
    hours = json['Hours'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Wechat'] = wechat;
    if (shot != null) {
      data['Shot'] = shot!.map((v) => v.toJson()).toList();
    }
    data['Money'] = money;
    if (gps != null) {
      data['Gps'] = gps!.toJson();
    }
    data['Msg'] = msg;
    data['StartTime'] = startTime;
    data['Hours'] = hours;
    return data;
  }
}

class NoteStat {
  int? count;
  double? money;
  double? score;

  NoteStat({this.count, this.money, this.score});

  NoteStat.fromJson(Map<String, dynamic> json) {
    count = json['Count'];
    money = json['Money'];
    score = json['Score'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Count'] = count;
    data['Money'] = money;
    data['Score'] = score;
    return data;
  }
}

class UserSummer {
  int? id;
  String? nm;
  String? logo;
  int? sex;
  int? sexMatch;
  int? sexGay;
  int? demands;
  int? height;
  int? weight;
  int? birthday;
  double? dist;
  bool? online;
  bool? vip;

  UserSummer(
      {this.id,
      this.nm,
      this.logo,
      this.sex,
      this.sexMatch,
      this.sexGay,
      this.demands,
      this.height,
      this.weight,
      this.birthday,
      this.dist,
      this.online,
      this.vip});

  UserSummer.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    nm = json['Nm'];
    logo = json['Logo'];
    sex = json['Sex'];
    sexMatch = json['SexMatch'];
    sexGay = json['SexGay'];
    demands = json['Demands'];
    height = json['Height'];
    weight = json['Weight'];
    birthday = json['Birthday'];
    dist = json['Dist'];
    online = json['Online'];
    vip = json['Vip'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Nm'] = nm;
    data['Logo'] = logo;
    data['Sex'] = sex;
    data['SexMatch'] = sexMatch;
    data['SexGay'] = sexGay;
    data['Demands'] = demands;
    data['Height'] = height;
    data['Weight'] = weight;
    data['Birthday'] = birthday;
    data['Dist'] = dist;
    data['Online'] = online;
    data['Vip'] = vip;
    return data;
  }
}

class UserDetail {
  int? id;
  String? nm;
  String? logo;
  int? sex;
  int? sexMatch;
  int? sexGay;
  int? demands;
  int? height;
  int? weight;
  int? birthday;
  int? degree;
  int? career;
  int? income;
  List<String>? labels;
  String? school;
  String? company;
  String? extend;
  String? logoBig;
  List<Shot>? shot;
  double? dist;
  bool? online;
  bool? vip;
  Contact? contact;

  UserDetail(
      {this.id,
      this.nm,
      this.logo,
      this.sex,
      this.sexMatch,
      this.sexGay,
      this.demands,
      this.height,
      this.weight,
      this.birthday,
      this.degree,
      this.career,
      this.income,
      this.labels,
      this.school,
      this.company,
      this.extend,
      this.logoBig,
      this.shot,
      this.dist,
      this.online,
      this.vip,
      this.contact});

  UserDetail.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    nm = json['Nm'];
    logo = json['Logo'];
    sex = json['Sex'];
    sexMatch = json['SexMatch'];
    sexGay = json['SexGay'];
    demands = json['Demands'];
    height = json['Height'];
    weight = json['Weight'];
    birthday = json['Birthday'];
    degree = json['Degree'];
    career = json['Career'];
    income = json['Income'];
    labels = json['Labels']?.cast<String>();
    school = json['School'];
    company = json['Company'];
    extend = json['Extend'];
    logoBig = json['LogoBig'];
    if (json['Shot'] != null) {
      shot = <Shot>[];
      json['Shot'].forEach((v) {
        shot!.add(Shot.fromJson(v));
      });
    }
    dist = json['Dist'];
    online = json['Online'];
    vip = json['Vip'];
    contact =
        json['Contact'] != null ? Contact.fromJson(json['Contact']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Nm'] = nm;
    data['Logo'] = logo;
    data['Sex'] = sex;
    data['SexMatch'] = sexMatch;
    data['SexGay'] = sexGay;
    data['Demands'] = demands;
    data['Height'] = height;
    data['Weight'] = weight;
    data['Birthday'] = birthday;
    data['Degree'] = degree;
    data['Career'] = career;
    data['Income'] = income;
    data['Labels'] = labels;
    data['School'] = school;
    data['Company'] = company;
    data['Extend'] = extend;
    data['LogoBig'] = logoBig;
    if (shot != null) {
      data['Shot'] = shot!.map((v) => v.toJson()).toList();
    }
    data['Dist'] = dist;
    data['Online'] = online;
    data['Vip'] = vip;
    if (contact != null) {
      data['Contact'] = contact!.toJson();
    }
    return data;
  }
}

class ContactSummer {
  int? id;
  String? nm;
  String? logo;
  int? sex;
  int? sexMatch;
  int? sexGay;
  int? demands;
  int? height;
  int? weight;
  int? birthday;
  double? dist;
  bool? online;
  bool? vip;
  DateTime? contactTime;
  bool? contactMe;

  ContactSummer(
      {this.id,
      this.nm,
      this.logo,
      this.sex,
      this.sexMatch,
      this.sexGay,
      this.demands,
      this.height,
      this.weight,
      this.birthday,
      this.dist,
      this.online,
      this.vip,
      this.contactTime,
      this.contactMe});

  ContactSummer.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    nm = json['Nm'];
    logo = json['Logo'];
    sex = json['Sex'];
    sexMatch = json['SexMatch'];
    sexGay = json['SexGay'];
    demands = json['Demands'];
    height = json['Height'];
    weight = json['Weight'];
    birthday = json['Birthday'];
    dist = json['Dist'];
    online = json['Online'];
    vip = json['Vip'];
    contactTime = json['ContactTime'] != null
        ? DateTime.tryParse(json['ContactTime'])
        : null;
    contactMe = json['ContactMe'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Nm'] = nm;
    data['Logo'] = logo;
    data['Sex'] = sex;
    data['SexMatch'] = sexMatch;
    data['SexGay'] = sexGay;
    data['Demands'] = demands;
    data['Height'] = height;
    data['Weight'] = weight;
    data['Birthday'] = birthday;
    data['Dist'] = dist;
    data['Online'] = online;
    data['Vip'] = vip;
    data['ContactTime'] = contactTime;
    data['ContactMe'] = contactMe;
    return data;
  }
}

class GmMsg {
  String? subj;
  String? content;
  DateTime? msgTime;

  GmMsg({this.subj, this.content, this.msgTime});

  GmMsg.fromJson(Map<String, dynamic> json) {
    subj = json['Subj'];
    content = json['Content'];
    msgTime =
        json['MsgTime'] != null ? DateTime.tryParse(json['MsgTime']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Subj'] = subj;
    data['Content'] = content;
    data['MsgTime'] = msgTime;
    return data;
  }
}

class UserNote {
  int? id;
  int? money;
  int? score;
  String? content;

  UserNote({this.id, this.money, this.score, this.content});

  UserNote.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    money = json['Money'];
    score = json['Score'];
    content = json['Content'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Money'] = money;
    data['Score'] = score;
    data['Content'] = content;
    return data;
  }
}

class ReqHead {
  int? id;
  String? pwd;

  ReqHead({this.id, this.pwd});

  ReqHead.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    return data;
  }
}

class RetHead {
  String? err;
  String? errDesc;

  RetHead({this.err, this.errDesc});

  RetHead.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    return data;
  }
}

class ReqLogin {
  int? id;
  String? pwd;
  bool? isReg;
  User? user;

  ReqLogin({this.id, this.pwd, this.isReg, this.user});

  ReqLogin.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    isReg = json['IsReg'];
    user = json['User'] != null ? User.fromJson(json['User']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    data['IsReg'] = isReg;
    if (user != null) {
      data['User'] = user!.toJson();
    }
    return data;
  }
}

class RetLogin {
  String? err;
  String? errDesc;
  User? user;
  int? retLogin;

  RetLogin({this.err, this.errDesc, this.user, this.retLogin});

  RetLogin.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    user = json['User'] != null ? User.fromJson(json['User']) : null;
    retLogin = json['RetLogin_'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    if (user != null) {
      data['User'] = user!.toJson();
    }
    data['RetLogin_'] = retLogin;
    return data;
  }
}

class ReqGetMe {
  int? id;
  String? pwd;
  int? reqGetMe;

  ReqGetMe({this.id, this.pwd, this.reqGetMe});

  ReqGetMe.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    reqGetMe = json['ReqGetMe_'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    data['ReqGetMe_'] = reqGetMe;
    return data;
  }
}

class RetGetMe {
  String? err;
  String? errDesc;
  User? user;
  int? retGetMe;

  RetGetMe({this.err, this.errDesc, this.user, this.retGetMe});

  RetGetMe.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    user = json['User'] != null ? User.fromJson(json['User']) : null;
    retGetMe = json['RetGetMe_'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    if (user != null) {
      data['User'] = user!.toJson();
    }
    data['RetGetMe_'] = retGetMe;
    return data;
  }
}

class ReqSetMe {
  int? id;
  String? pwd;
  User? user;
  List<String>? field;

  ReqSetMe({this.id, this.pwd, this.user, this.field});

  ReqSetMe.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    user = json['User'] != null ? User.fromJson(json['User']) : null;
    field = json['Field']?.cast<String>();
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    if (user != null) {
      data['User'] = user!.toJson();
    }
    data['Field'] = field;
    return data;
  }
}

class RetSetMe {
  String? err;
  String? errDesc;
  User? user;
  int? retSetMe;

  RetSetMe({this.err, this.errDesc, this.user, this.retSetMe});

  RetSetMe.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    user = json['User'] != null ? User.fromJson(json['User']) : null;
    retSetMe = json['RetSetMe_'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    if (user != null) {
      data['User'] = user!.toJson();
    }
    data['RetSetMe_'] = retSetMe;
    return data;
  }
}

class ReqNear {
  int? id;
  String? pwd;
  Gps? gps;
  int? dist;

  ReqNear({this.id, this.pwd, this.gps, this.dist});

  ReqNear.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    gps = json['Gps'] != null ? Gps.fromJson(json['Gps']) : null;
    dist = json['Dist'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    if (gps != null) {
      data['Gps'] = gps!.toJson();
    }
    data['Dist'] = dist;
    return data;
  }
}

class RetNear {
  String? err;
  String? errDesc;
  List<UserSummer>? userSummer;

  RetNear({this.err, this.errDesc, this.userSummer});

  RetNear.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    if (json['UserSummer'] != null) {
      userSummer = <UserSummer>[];
      json['UserSummer'].forEach((v) {
        userSummer!.add(UserSummer.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    if (userSummer != null) {
      data['UserSummer'] = userSummer!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class ReqDetail {
  int? id;
  String? pwd;
  int? userId;

  ReqDetail({this.id, this.pwd, this.userId});

  ReqDetail.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    userId = json['UserId'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    data['UserId'] = userId;
    return data;
  }
}

class RetDetail {
  String? err;
  String? errDesc;
  UserDetail? userDetail;

  RetDetail({this.err, this.errDesc, this.userDetail});

  RetDetail.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    userDetail = json['UserDetail'] != null
        ? UserDetail.fromJson(json['UserDetail'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    if (userDetail != null) {
      data['UserDetail'] = userDetail!.toJson();
    }
    return data;
  }
}

class ReqContact {
  int? id;
  String? pwd;
  int? toId;

  ReqContact({this.id, this.pwd, this.toId});

  ReqContact.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    toId = json['ToId'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    data['ToId'] = toId;
    return data;
  }
}

class RetContact {
  String? err;
  String? errDesc;
  Contact? contact;

  RetContact({this.err, this.errDesc, this.contact});

  RetContact.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    contact =
        json['Contact'] != null ? Contact.fromJson(json['Contact']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    if (contact != null) {
      data['Contact'] = contact!.toJson();
    }
    return data;
  }
}

class ReqOpenContact {
  int? id;
  String? pwd;
  Contact? contact;

  ReqOpenContact({this.id, this.pwd, this.contact});

  ReqOpenContact.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    contact =
        json['Contact'] != null ? Contact.fromJson(json['Contact']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    if (contact != null) {
      data['Contact'] = contact!.toJson();
    }
    return data;
  }
}

class RetOpenContact {
  String? err;
  String? errDesc;
  int? retOpenContact;

  RetOpenContact({this.err, this.errDesc, this.retOpenContact});

  RetOpenContact.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    retOpenContact = json['RetOpenContact_'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    data['RetOpenContact_'] = retOpenContact;
    return data;
  }
}

class ReqCloseContact {
  int? id;
  String? pwd;
  int? reqCloseContact;

  ReqCloseContact({this.id, this.pwd, this.reqCloseContact});

  ReqCloseContact.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    reqCloseContact = json['ReqCloseContact_'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    data['ReqCloseContact_'] = reqCloseContact;
    return data;
  }
}

class RetCloseContact {
  String? err;
  String? errDesc;
  int? retCloseContact;

  RetCloseContact({this.err, this.errDesc, this.retCloseContact});

  RetCloseContact.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    retCloseContact = json['RetCloseContact_'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    data['RetCloseContact_'] = retCloseContact;
    return data;
  }
}

class ReqContactList {
  int? id;
  String? pwd;
  DateTime? lastContactTime;

  ReqContactList({this.id, this.pwd, this.lastContactTime});

  ReqContactList.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    lastContactTime = json['LastContactTime'] != null
        ? DateTime.tryParse(json['LastContactTime'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    data['LastContactTime'] = lastContactTime;
    return data;
  }
}

class RetContactList {
  String? err;
  String? errDesc;
  List<ContactSummer>? contactSummer;

  RetContactList({this.err, this.errDesc, this.contactSummer});

  RetContactList.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    if (json['ContactSummer'] != null) {
      contactSummer = <ContactSummer>[];
      json['ContactSummer'].forEach((v) {
        contactSummer!.add(ContactSummer.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    if (contactSummer != null) {
      data['ContactSummer'] = contactSummer!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class ReqBlack {
  int? id;
  String? pwd;
  String? type;
  String? key;

  ReqBlack({this.id, this.pwd, this.type, this.key});

  ReqBlack.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    type = json['Type'];
    key = json['Key'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    data['Type'] = type;
    data['Key'] = key;
    return data;
  }
}

class RetBlack {
  String? err;
  String? errDesc;
  String? key;

  RetBlack({this.err, this.errDesc, this.key});

  RetBlack.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    key = json['Key'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    data['Key'] = key;
    return data;
  }
}

class ReqBlackId {
  int? id;
  String? pwd;
  int? blackId;

  ReqBlackId({this.id, this.pwd, this.blackId});

  ReqBlackId.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    blackId = json['BlackId'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    data['BlackId'] = blackId;
    return data;
  }
}

class RetBlackId {
  String? err;
  String? errDesc;
  UserBase? userBase;

  RetBlackId({this.err, this.errDesc, this.userBase});

  RetBlackId.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    userBase =
        json['UserBase'] != null ? UserBase.fromJson(json['UserBase']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    if (userBase != null) {
      data['UserBase'] = userBase!.toJson();
    }
    return data;
  }
}

class ReqBlackIdList {
  int? id;
  String? pwd;
  int? reqBlackIdList;

  ReqBlackIdList({this.id, this.pwd, this.reqBlackIdList});

  ReqBlackIdList.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    reqBlackIdList = json['ReqBlackIdList_'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    data['ReqBlackIdList_'] = reqBlackIdList;
    return data;
  }
}

class RetBlackIdList {
  String? err;
  String? errDesc;
  List<UserBase>? userBase;

  RetBlackIdList({this.err, this.errDesc, this.userBase});

  RetBlackIdList.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    if (json['UserBase'] != null) {
      userBase = <UserBase>[];
      json['UserBase'].forEach((v) {
        userBase!.add(UserBase.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    if (userBase != null) {
      data['UserBase'] = userBase!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class ReqLogout {
  int? id;
  String? pwd;
  int? reqLogout;

  ReqLogout({this.id, this.pwd, this.reqLogout});

  ReqLogout.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    reqLogout = json['ReqLogout_'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    data['ReqLogout_'] = reqLogout;
    return data;
  }
}

class RetLogout {
  String? err;
  String? errDesc;
  int? retLogout;

  RetLogout({this.err, this.errDesc, this.retLogout});

  RetLogout.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    retLogout = json['RetLogout_'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    data['RetLogout_'] = retLogout;
    return data;
  }
}

class ReqReport {
  int? id;
  String? pwd;
  UserReport? userReport;

  ReqReport({this.id, this.pwd, this.userReport});

  ReqReport.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    userReport = json['UserReport'] != null
        ? UserReport.fromJson(json['UserReport'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    if (userReport != null) {
      data['UserReport'] = userReport!.toJson();
    }
    return data;
  }
}

class UserReport {
  int? id;
  int? userId;
  String? subj;
  String? content;
  String? imgKey;

  UserReport({this.id, this.userId, this.subj, this.content, this.imgKey});

  UserReport.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    userId = json['UserId'];
    subj = json['Subj'];
    content = json['Content'];
    imgKey = json['ImgKey'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['UserId'] = userId;
    data['Subj'] = subj;
    data['Content'] = content;
    data['ImgKey'] = imgKey;
    return data;
  }
}

class RetReport {
  String? err;
  String? errDesc;
  int? retReport;

  RetReport({this.err, this.errDesc, this.retReport});

  RetReport.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    retReport = json['RetReport_'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    data['RetReport_'] = retReport;
    return data;
  }
}

class ReqSetNote {
  int? id;
  String? pwd;
  UserNote? userNote;

  ReqSetNote({this.id, this.pwd, this.userNote});

  ReqSetNote.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    userNote =
        json['UserNote'] != null ? UserNote.fromJson(json['UserNote']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    if (userNote != null) {
      data['UserNote'] = userNote!.toJson();
    }
    return data;
  }
}

class RetSetNote {
  String? err;
  String? errDesc;
  int? retSetNote;

  RetSetNote({this.err, this.errDesc, this.retSetNote});

  RetSetNote.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    retSetNote = json['RetSetNote_'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    data['RetSetNote_'] = retSetNote;
    return data;
  }
}

class ReqGetNote {
  int? id;
  String? pwd;
  int? userId;
  int? reqGetNote;

  ReqGetNote({this.id, this.pwd, this.userId, this.reqGetNote});

  ReqGetNote.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    userId = json['UserId'];
    reqGetNote = json['ReqGetNote_'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    data['UserId'] = userId;
    data['ReqGetNote_'] = reqGetNote;
    return data;
  }
}

class RetGetNote {
  String? err;
  String? errDesc;
  UserNote? userNote;

  RetGetNote({this.err, this.errDesc, this.userNote});

  RetGetNote.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    userNote =
        json['UserNote'] != null ? UserNote.fromJson(json['UserNote']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    if (userNote != null) {
      data['UserNote'] = userNote!.toJson();
    }
    return data;
  }
}

class ReqGmBan {
  int? id;
  String? pwd;
  int? banId;
  bool? ban;
  int? banDuration;
  String? cause;

  ReqGmBan(
      {this.id, this.pwd, this.banId, this.ban, this.banDuration, this.cause});

  ReqGmBan.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    banId = json['BanId'];
    ban = json['Ban'];
    banDuration = json['BanDuration'];
    cause = json['Cause'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    data['BanId'] = banId;
    data['Ban'] = ban;
    data['BanDuration'] = banDuration;
    data['Cause'] = cause;
    return data;
  }
}

class RetGmBan {
  String? err;
  String? errDesc;
  int? retGmBan;

  RetGmBan({this.err, this.errDesc, this.retGmBan});

  RetGmBan.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    retGmBan = json['RetGmBan_'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    data['RetGmBan_'] = retGmBan;
    return data;
  }
}

class ReqGmMsg {
  int? id;
  String? pwd;
  int? userId;
  GmMsg? gmMsg;

  ReqGmMsg({this.id, this.pwd, this.userId, this.gmMsg});

  ReqGmMsg.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    userId = json['UserId'];
    gmMsg = json['GmMsg'] != null ? GmMsg.fromJson(json['GmMsg']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    data['UserId'] = userId;
    if (gmMsg != null) {
      data['GmMsg'] = gmMsg!.toJson();
    }
    return data;
  }
}

class RetGmMsg {
  String? err;
  String? errDesc;
  int? retGmMsg;

  RetGmMsg({this.err, this.errDesc, this.retGmMsg});

  RetGmMsg.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    retGmMsg = json['RetGmMsg_'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    data['RetGmMsg_'] = retGmMsg;
    return data;
  }
}

class ReqGmMsgList {
  int? id;
  String? pwd;
  DateTime? lastTime;
  int? reqGmMsgList;

  ReqGmMsgList({this.id, this.pwd, this.lastTime, this.reqGmMsgList});

  ReqGmMsgList.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    lastTime =
        json['LastTime'] != null ? DateTime.tryParse(json['LastTime']) : null;
    reqGmMsgList = json['ReqGmMsgList_'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    data['LastTime'] = lastTime;
    data['ReqGmMsgList_'] = reqGmMsgList;
    return data;
  }
}

class RetGmMsgList {
  String? err;
  String? errDesc;
  List<GmMsg>? gmMsg;

  RetGmMsgList({this.err, this.errDesc, this.gmMsg});

  RetGmMsgList.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    if (json['GmMsg'] != null) {
      gmMsg = <GmMsg>[];
      json['GmMsg'].forEach((v) {
        gmMsg!.add(GmMsg.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    if (gmMsg != null) {
      data['GmMsg'] = gmMsg!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class ReqOss {
  int? id;
  String? pwd;
  String? regHp;
  String? regPwd;
  List<String>? ext;

  ReqOss({this.id, this.pwd, this.regHp, this.regPwd, this.ext});

  ReqOss.fromJson(Map<String, dynamic> json) {
    id = json['Id'];
    pwd = json['Pwd'];
    regHp = json['RegHp'];
    regPwd = json['RegPwd'];
    ext = json['Ext']?.cast<String>();
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Id'] = id;
    data['Pwd'] = pwd;
    data['RegHp'] = regHp;
    data['RegPwd'] = regPwd;
    data['Ext'] = ext;
    return data;
  }
}

class RetOss {
  String? err;
  String? errDesc;
  List<OssUrl>? ossUrl;

  RetOss({this.err, this.errDesc, this.ossUrl});

  RetOss.fromJson(Map<String, dynamic> json) {
    err = json['Err'];
    errDesc = json['ErrDesc'];
    if (json['OssUrl'] != null) {
      ossUrl = <OssUrl>[];
      json['OssUrl'].forEach((v) {
        ossUrl!.add(OssUrl.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Err'] = err;
    data['ErrDesc'] = errDesc;
    if (ossUrl != null) {
      data['OssUrl'] = ossUrl!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class OssUrl {
  String? key;
  String? url;

  OssUrl({this.key, this.url});

  OssUrl.fromJson(Map<String, dynamic> json) {
    key = json['Key'];
    url = json['Url'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Key'] = key;
    data['Url'] = url;
    return data;
  }
}
